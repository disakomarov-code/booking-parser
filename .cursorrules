role: >
  You are an expert senior Java developer building a robust, privacy-safe tool
  that exports a user's past Booking.com reservations to a CSV file.

objectives:
  - Implement a Java-based application that logs into Booking.com and collects a user's historical bookings.
  - Extract and normalize the following fields for each booking:
    - City
    - Country
    - Hotel name
    - Start date
    - End date
    - Total price of booking
  - Write results to a CSV file with the exact column order above.
  - Package the application as a runnable JAR with all dependencies included.

non_goals:
  - Scraping content unrelated to the user's own bookings.
  - Persisting personal data beyond the local machine.
  - Violating Booking.com TOS or bypassing hard anti-bot measures.

data_schema:
  csv_columns:
    - City
    - Country
    - Hotel name
    - Start date (YYYY-MM-DD)
    - End date (YYYY-MM-DD)
    - Total price of booking (numeric + currency code if available)

inputs:
  - Booking.com credentials via environment variables: BOOKING_EMAIL, BOOKING_PASSWORD
  - Optional: manual login if 2FA/CAPTCHA encountered.

compliance_and_privacy:
  - Store credentials only in environment variables or a `.env` file (excluded from JAR).
  - No external storage of personal data.
  - Respect Booking.com rate limits.

tech_stack:
  language: "Java 17+"
  build_tool: Maven
  packaging: Runnable fat JAR via Maven Shade Plugin
  libs:
    - org.seleniumhq.selenium:selenium-java (browser automation)
    - io.github.bonigarcia:webdrivermanager (driver management)
    - com.opencsv:opencsv (CSV export)
    - io.github.cdimascio:java-dotenv (env file loading)
    - org.slf4j:slf4j-simple (logging)

project_structure:
  - src/main/java/com/example/bookingparser/Main.java          # entry point
  - src/main/java/com/example/bookingparser/AuthService.java   # login and session handling
  - src/main/java/com/example/bookingparser/Scraper.java       # navigation and extraction
  - src/main/java/com/example/bookingparser/Normalizer.java    # normalize dates, prices, locations
  - src/main/java/com/example/bookingparser/Booking.java       # model class
  - src/main/java/com/example/bookingparser/CsvExporter.java   # CSV writer
  - src/test/java/com/example/bookingparser/…                  # unit tests
  - pom.xml
  - README.md

workflow:
  - Use WebDriverManager to handle browser drivers automatically.
  - Launch browser, log in with credentials from env vars.
  - Navigate to "Past bookings" / "Reservations" page.
  - Handle pagination or "Load more" buttons.
  - Extract fields, normalize formats, append to list of Booking objects.
  - Export list to CSV in required schema.
  - Build fat JAR so user can run `java -jar booking-parser.jar`.

cli_contract:
  build_command: mvn clean package
  run_command: java -jar target/booking-parser.jar --out bookings.csv
  options:
    - --from YYYY-MM-DD (optional)
    - --to YYYY-MM-DD (optional)
    - --out FILE.csv (default: bookings.csv)
    - --headless / --no-headless (optional)

selectors_strategy:
  - Prefer stable HTML attributes or labels.
  - Fallback to XPath if no stable selectors exist.

date_and_currency_normalization:
  - Dates → YYYY-MM-DD
  - Prices → retain original currency symbol + ISO code if determinable.
  - Strip thousand separators; unify decimal point.

error_handling:
  - Retry navigation steps up to 3 times with backoff.
  - On failure, log error and continue with remaining bookings.
  - On hard failure, export partial CSV.

testing:
  - Unit tests for date and price normalization.
  - Mock tests for HTML parsing logic.

logging:
  - Use SLF4J SimpleLogger.
  - INFO for normal progress, DEBUG for troubleshooting.
  - Redact sensitive values from logs.

security:
  - No credentials in logs or code.
  - .env is gitignored and excluded from JAR.

acceptance_criteria:
  - Running the JAR produces a CSV with:
    "City,Country,Hotel name,Start date,End date,Total price of booking"
  - No sensitive data persisted outside CSV output.
  - Works on Windows, macOS, Linux without extra installation (Java 17+ only).

prompts_for_agent:
  - "Generate Maven project structure and pom.xml with Selenium, WebDriverManager, OpenCSV, dotenv, and SLF4J."
  - "Implement Main.java to parse CLI args, load env vars, and run scraper pipeline."
  - "Implement AuthService.java for Booking.com login with cookie persistence."
  - "Implement Scraper.java to navigate bookings history and extract required fields."
  - "Implement Normalizer.java for date/price/country formatting."
  - "Implement CsvExporter.java to write to CSV with exact schema."
  - "Write unit tests for Normalizer and CsvExporter."
  - "Build runnable JAR using Maven Shade Plugin."

restrictions:
  - Do not hardcode credentials.
  - Do not exceed 1 request/second.
  - Ask user for manual verification if CAPTCHA or 2FA detected.

readme_todos:
  - Prerequisites (Java 17+, Maven)
  - Setup (.env and env vars)
  - Build instructions (mvn clean package)
  - Run instructions (java -jar parser.jar)
  - Troubleshooting (CAPTCHA, headless mode)
